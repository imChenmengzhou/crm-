前端开发工程师

  ->API（Application Programming Interface）接口文档（应用程序接口）
	面试官你好，我的理解：后台给我的地址就是API

后台开发工程师


1.功能分析
·（1）获取所有的客户信息
·（2）把页面中新填写的客户信息获取到，增加新的客户（把新的客户信息存储到服务器上）
·（3）获取某一个指定客户的信息，把信息放入到页面的对应位置
·（4）把原有客户的某些信息进行修改（把服务器端上的存储的那一份信息修改了）
·（5）删除指定客户信息（把服务器上之前存储的某一条删除）


服务器端后台开发
首先需要在服务器上搭建一个服务（监听一个端口），把我们的项目发布出去
·（1）根据客户端的请求，把所有的客户信息准备好，并且返回给客户端
·（2）把客户端传递进来的新的客户信息增加到服务器的指定位置上（正常情况下都是存储在数据库中，此案例用文件存储代替数据库），并且告诉客户端增加成功还是失败

客户端前端开发
拿到psd效果图后，编写html+css等
·（1）通过ajax向服务器端发送一个请求，把数据获取到，解析和数据绑定
·（2）把页面中用户输入的信息获取到，并且通过ajax传递给服务器，接收客户端告诉我们的成功还是失败信息，从而进行后续操作


//-->API接口文档

客户端和服务器端的内容数据的传输一般都是通过JSON格式的字符串进行的

1.获取所有的客户信息
   URL:"/getList"      GET
   参数：（客户端传递给服务器端的内容）        无
   返回：（服务器端返回给客户端的内容）
        '{
           “code”:0,     //->返回结果的标示，0代表成功，1代表失败（没有任何的客户信息）
           “msg”：”获取成功！“，         //->返回结果标识的说明信息
           “data”：[
		{“id”:xxx,“name”:“xxx”,“age”:xx,“phone”：“xxxxxx”,
“address”：“xxxxxx”},
		....
	  ]
        }'

2.获取具体的某一个客户信息
   URL：“/getInfo”   GET
   参数：?id=xx  把需要获取的客户ID传递给服务器
   返回：
   ’{
	“code”:0        //->0 成功 1失败（当前的客户信息不存在）
	“msg”:"",
	“data”:{
		“id”:xxx,
		“name”:"",
		“age”:xx,
		“phone”:"",
		“address”:""
	}
   }‘


3.增加客户信息
   URL:"/addInfo"      POST
   参数:请求主体中，'{"name":"","age":"","phone":"","address":""}' 
	(发现少了个ID，在增加的过程中，我们的ID是服务器端自动按照规律生成的；在现有的最后一个客户		ID的基础上+1即可)
   返回：
   '{
       "code":0,         //->0成功   1失败（原因不确定）
       "msg":""
   }'

4.修改客户信息
   URL:"/updataInfo"    POST
   参数：请求主体中，'{"id":xx,"name":"","age":"","phone":"","address":""}'
   返回：
   '{
       "code":0     //->0成功    1失败（原因不确定）
       "msg":""
   }'


5.删除客户信息
   URL:"removeInfo"     GET
   参数：?id=xx
   返回：
   '{
       "code":0     //->0成功    1失败（原因不确定）
       "msg":""
   }'















         